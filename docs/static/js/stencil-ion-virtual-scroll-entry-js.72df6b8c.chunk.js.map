{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-virtual-scroll.entry.js"],"names":["createNode","el","type","template","getTemplate","ownerDocument","importNode","content","children","querySelector","findCellIndex","cells","index","max","length","findIndex","c","inplaceUpdate","dst","src","offset","i","calcCells","items","itemHeight","headerHeight","footerHeight","headerFn","footerFn","approxHeaderHeight","approxFooterHeight","approxItemHeight","j","len","end","item","value","push","height","reads","visible","calcHeightIndex","buf","acum","resizeBuffer","Uint32Array","newBuf","set","subarray","VirtualScroll","hostRef","registerInstance","this","range","viewportHeight","virtualDom","isEnabled","viewportOffset","currentScrollTop","indexDirty","lastItemLen","totalHeight","onScroll","updateVirtualScroll","contentEl","closest","console","error","getScrollElement","scrollEl","updateState","undefined","Promise","resolve","heightIndex","cell","find","positionForIndex","getHeightIndex","cellIndex","Math","scheduleUpdate","checkRange","timerUpdate","clearTimeout","readTask","readVS","bind","writeTask","writeVS","topOffset","node","offsetTop","parentElement","offsetHeight","scrollTop","dirtyIndex","viewport","vierportHeight","margin","top","bottom","getViewport","buffer","topPos","bottomPos","min","getRange","currentRange","getShouldUpdate","dom","change","d","toMutate","n","pool","filter","forEach","updateVDom","nodeRender","updateCellHeight","child","Array","from","tagName","childrenNu","newChild","classList","add","appendChild","style","transform","remove","doRender","domRender","renderItem","forceUpdate","update","window","getComputedStyle","parseFloat","getPropertyValue","setCellHeight","componentOnReady","then","setTimeout","shouldEnable","enableScrollEvents","Infinity","shouldListen","rmEvent","addEventListener","removeEventListener","renderHeader","renderFooter","h","Host","VirtualProxy","map","renderVirtualNode","getElement","utils","vattrs","classes","class","Object","assign"],"mappings":"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","file":"static/js/stencil-ion-virtual-scroll-entry-js.72df6b8c.chunk.js","sourcesContent":["import { r as registerInstance, f as readTask, w as writeTask, i as forceUpdate, h, H as Host, e as getElement } from './index-2cd7e630.js';\n\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\n\nconst MIN_READS = 2;\nconst updateVDom = (dom, heightIndex, cells, range) => {\n    // reset dom\n    for (const node of dom) {\n        node.change = NODE_CHANGE_NONE;\n        node.d = true;\n    }\n    // try to match into exisiting dom\n    const toMutate = [];\n    const end = range.offset + range.length;\n    for (let i = range.offset; i < end; i++) {\n        const cell = cells[i];\n        const node = dom.find(n => n.d && n.cell === cell);\n        if (node) {\n            const top = heightIndex[i];\n            if (top !== node.top) {\n                node.top = top;\n                node.change = NODE_CHANGE_POSITION;\n            }\n            node.d = false;\n        }\n        else {\n            toMutate.push(cell);\n        }\n    }\n    // needs to append\n    const pool = dom.filter(n => n.d);\n    for (const cell of toMutate) {\n        const node = pool.find(n => n.d && n.cell.type === cell.type);\n        const index = cell.i;\n        if (node) {\n            node.d = false;\n            node.change = NODE_CHANGE_CELL;\n            node.cell = cell;\n            node.top = heightIndex[index];\n        }\n        else {\n            dom.push({\n                d: false,\n                cell,\n                visible: true,\n                change: NODE_CHANGE_CELL,\n                top: heightIndex[index],\n            });\n        }\n    }\n    dom\n        .filter(n => n.d && n.top !== -9999)\n        .forEach(n => {\n        n.change = NODE_CHANGE_POSITION;\n        n.top = -9999;\n    });\n};\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n    const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n    const childrenNu = children.length;\n    let child;\n    for (let i = 0; i < dom.length; i++) {\n        const node = dom[i];\n        const cell = node.cell;\n        // the cell change, the content must be updated\n        if (node.change === NODE_CHANGE_CELL) {\n            if (i < childrenNu) {\n                child = children[i];\n                nodeRender(child, cell, i);\n            }\n            else {\n                const newChild = createNode(el, cell.type);\n                child = nodeRender(newChild, cell, i) || newChild;\n                child.classList.add('virtual-item');\n                el.appendChild(child);\n            }\n            child['$ionCell'] = cell;\n        }\n        else {\n            child = children[i];\n        }\n        // only update position when it changes\n        if (node.change !== NODE_CHANGE_NONE) {\n            child.style.transform = `translate3d(0,${node.top}px,0)`;\n        }\n        // update visibility\n        const visible = cell.visible;\n        if (node.visible !== visible) {\n            if (visible) {\n                child.classList.remove('virtual-loading');\n            }\n            else {\n                child.classList.add('virtual-loading');\n            }\n            node.visible = visible;\n        }\n        // dynamic height\n        if (cell.reads > 0) {\n            updateCellHeight(cell, child);\n            cell.reads--;\n        }\n    }\n};\nconst createNode = (el, type) => {\n    const template = getTemplate(el, type);\n    if (template && el.ownerDocument) {\n        return el.ownerDocument.importNode(template.content, true).children[0];\n    }\n    return null;\n};\nconst getTemplate = (el, type) => {\n    switch (type) {\n        case CELL_TYPE_ITEM: return el.querySelector('template:not([name])');\n        case CELL_TYPE_HEADER: return el.querySelector('template[name=header]');\n        case CELL_TYPE_FOOTER: return el.querySelector('template[name=footer]');\n    }\n};\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n    return {\n        top: Math.max(scrollTop - margin, 0),\n        bottom: scrollTop + vierportHeight + margin\n    };\n};\nconst getRange = (heightIndex, viewport, buffer) => {\n    const topPos = viewport.top;\n    const bottomPos = viewport.bottom;\n    // find top index\n    let i = 0;\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] > topPos) {\n            break;\n        }\n    }\n    const offset = Math.max(i - buffer - 1, 0);\n    // find bottom index\n    for (; i < heightIndex.length; i++) {\n        if (heightIndex[i] >= bottomPos) {\n            break;\n        }\n    }\n    const end = Math.min(i + buffer, heightIndex.length);\n    const length = end - offset;\n    return { offset, length };\n};\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n    const end = range.offset + range.length;\n    return (dirtyIndex <= end ||\n        currentRange.offset !== range.offset ||\n        currentRange.length !== range.length);\n};\nconst findCellIndex = (cells, index) => {\n    const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n    if (index === 0) {\n        return 0;\n    }\n    else if (index === max + 1) {\n        return cells.length;\n    }\n    else {\n        return cells.findIndex(c => c.index === index);\n    }\n};\nconst inplaceUpdate = (dst, src, offset) => {\n    if (offset === 0 && src.length >= dst.length) {\n        return src;\n    }\n    for (let i = 0; i < src.length; i++) {\n        dst[i + offset] = src[i];\n    }\n    return dst;\n};\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n    const cells = [];\n    const end = len + offset;\n    for (let i = offset; i < end; i++) {\n        const item = items[i];\n        if (headerFn) {\n            const value = headerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_HEADER,\n                    value,\n                    index: i,\n                    height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n                    reads: headerHeight ? 0 : MIN_READS,\n                    visible: !!headerHeight,\n                });\n            }\n        }\n        cells.push({\n            i: j++,\n            type: CELL_TYPE_ITEM,\n            value: item,\n            index: i,\n            height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n            reads: itemHeight ? 0 : MIN_READS,\n            visible: !!itemHeight,\n        });\n        if (footerFn) {\n            const value = footerFn(item, i, items);\n            if (value != null) {\n                cells.push({\n                    i: j++,\n                    type: CELL_TYPE_FOOTER,\n                    value,\n                    index: i,\n                    height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n                    reads: footerHeight ? 0 : MIN_READS,\n                    visible: !!footerHeight,\n                });\n            }\n        }\n    }\n    return cells;\n};\nconst calcHeightIndex = (buf, cells, index) => {\n    let acum = buf[index];\n    for (let i = index; i < buf.length; i++) {\n        buf[i] = acum;\n        acum += cells[i].height;\n    }\n    return acum;\n};\nconst resizeBuffer = (buf, len) => {\n    if (!buf) {\n        return new Uint32Array(len);\n    }\n    if (buf.length === len) {\n        return buf;\n    }\n    else if (len > buf.length) {\n        const newBuf = new Uint32Array(len);\n        newBuf.set(buf);\n        return newBuf;\n    }\n    else {\n        return buf.subarray(0, len);\n    }\n};\nconst positionForIndex = (index, cells, heightIndex) => {\n    const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n    if (cell) {\n        return heightIndex[cell.i];\n    }\n    return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\n\nconst VirtualScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.range = { offset: 0, length: 0 };\n        this.viewportHeight = 0;\n        this.cells = [];\n        this.virtualDom = [];\n        this.isEnabled = false;\n        this.viewportOffset = 0;\n        this.currentScrollTop = 0;\n        this.indexDirty = 0;\n        this.lastItemLen = 0;\n        this.totalHeight = 0;\n        /**\n         * It is important to provide this\n         * if virtual item height will be significantly larger than the default\n         * The approximate height of each virtual item template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxItemHeight = 45;\n        /**\n         * The approximate height of each header template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxHeaderHeight = 30;\n        /**\n         * The approximate width of each footer template's cell.\n         * This dimension is used to help determine how many cells should\n         * be created when initialized, and to help calculate the height of\n         * the scrollable area. This height value can only use `px` units.\n         * Note that the actual rendered size of each cell comes from the\n         * app's CSS, whereas this approximation is used to help calculate\n         * initial dimensions before the item has been rendered.\n         */\n        this.approxFooterHeight = 30;\n        this.onScroll = () => {\n            this.updateVirtualScroll();\n        };\n    }\n    itemsChanged() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.contentEl = contentEl;\n        this.calcCells();\n        this.updateState();\n    }\n    componentDidUpdate() {\n        this.updateState();\n    }\n    disconnectedCallback() {\n        this.scrollEl = undefined;\n    }\n    onResize() {\n        this.calcCells();\n        this.updateVirtualScroll();\n    }\n    /**\n     * Returns the position of the virtual item at the given index.\n     */\n    positionForItem(index) {\n        return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n    }\n    /**\n     * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n     * dirty any time the content or their style changes.\n     *\n     * The subset of items to be updated can are specifing by an offset and a length.\n     */\n    async checkRange(offset, len = -1) {\n        // TODO: kind of hacky how we do in-place updated of the cells\n        // array. this part needs a complete refactor\n        if (!this.items) {\n            return;\n        }\n        const length = (len === -1)\n            ? this.items.length - offset\n            : len;\n        const cellIndex = findCellIndex(this.cells, offset);\n        const cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, cellIndex, offset, length);\n        this.cells = inplaceUpdate(this.cells, cells, cellIndex);\n        this.lastItemLen = this.items.length;\n        this.indexDirty = Math.max(offset - 1, 0);\n        this.scheduleUpdate();\n    }\n    /**\n     * This method marks the tail the items array as dirty, so they can be re-rendered.\n     *\n     * It's equivalent to calling:\n     *\n     * ```js\n     * virtualScroll.checkRange(lastItemLen);\n     * ```\n     */\n    async checkEnd() {\n        if (this.items) {\n            this.checkRange(this.lastItemLen);\n        }\n    }\n    updateVirtualScroll() {\n        // do nothing if virtual-scroll is disabled\n        if (!this.isEnabled || !this.scrollEl) {\n            return;\n        }\n        // unschedule future updates\n        if (this.timerUpdate) {\n            clearTimeout(this.timerUpdate);\n            this.timerUpdate = undefined;\n        }\n        // schedule DOM operations into the stencil queue\n        readTask(this.readVS.bind(this));\n        writeTask(this.writeVS.bind(this));\n    }\n    readVS() {\n        const { contentEl, scrollEl, el } = this;\n        let topOffset = 0;\n        let node = el;\n        while (node && node !== contentEl) {\n            topOffset += node.offsetTop;\n            node = node.parentElement;\n        }\n        this.viewportOffset = topOffset;\n        if (scrollEl) {\n            this.viewportHeight = scrollEl.offsetHeight;\n            this.currentScrollTop = scrollEl.scrollTop;\n        }\n    }\n    writeVS() {\n        const dirtyIndex = this.indexDirty;\n        // get visible viewport\n        const scrollTop = this.currentScrollTop - this.viewportOffset;\n        const viewport = getViewport(scrollTop, this.viewportHeight, 100);\n        // compute lazily the height index\n        const heightIndex = this.getHeightIndex();\n        // get array bounds of visible cells base in the viewport\n        const range = getRange(heightIndex, viewport, 2);\n        // fast path, do nothing\n        const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n        if (!shouldUpdate) {\n            return;\n        }\n        this.range = range;\n        // in place mutation of the virtual DOM\n        updateVDom(this.virtualDom, heightIndex, this.cells, range);\n        // Write DOM\n        // Different code paths taken depending of the render API used\n        if (this.nodeRender) {\n            doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n        }\n        else if (this.domRender) {\n            this.domRender(this.virtualDom);\n        }\n        else if (this.renderItem) {\n            forceUpdate(this);\n        }\n    }\n    updateCellHeight(cell, node) {\n        const update = () => {\n            if (node['$ionCell'] === cell) {\n                const style = window.getComputedStyle(node);\n                const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n                this.setCellHeight(cell, height);\n            }\n        };\n        if (node && node.componentOnReady) {\n            node.componentOnReady().then(update);\n        }\n        else {\n            update();\n        }\n    }\n    setCellHeight(cell, height) {\n        const index = cell.i;\n        // the cell might changed since the height update was scheduled\n        if (cell !== this.cells[index]) {\n            return;\n        }\n        if (cell.height !== height || cell.visible !== true) {\n            cell.visible = true;\n            cell.height = height;\n            this.indexDirty = Math.min(this.indexDirty, index);\n            this.scheduleUpdate();\n        }\n    }\n    scheduleUpdate() {\n        clearTimeout(this.timerUpdate);\n        this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n    }\n    updateState() {\n        const shouldEnable = !!(this.scrollEl &&\n            this.cells);\n        if (shouldEnable !== this.isEnabled) {\n            this.enableScrollEvents(shouldEnable);\n            if (shouldEnable) {\n                this.updateVirtualScroll();\n            }\n        }\n    }\n    calcCells() {\n        if (!this.items) {\n            return;\n        }\n        this.lastItemLen = this.items.length;\n        this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n        this.indexDirty = 0;\n    }\n    getHeightIndex() {\n        if (this.indexDirty !== Infinity) {\n            this.calcHeightIndex(this.indexDirty);\n        }\n        return this.heightIndex;\n    }\n    calcHeightIndex(index = 0) {\n        // TODO: optimize, we don't need to calculate all the cells\n        this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n        this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n        this.indexDirty = Infinity;\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.rmEvent) {\n            this.rmEvent();\n            this.rmEvent = undefined;\n        }\n        const scrollEl = this.scrollEl;\n        if (scrollEl) {\n            this.isEnabled = shouldListen;\n            scrollEl.addEventListener('scroll', this.onScroll);\n            this.rmEvent = () => {\n                scrollEl.removeEventListener('scroll', this.onScroll);\n            };\n        }\n    }\n    renderVirtualNode(node) {\n        const { type, value, index } = node.cell;\n        switch (type) {\n            case CELL_TYPE_ITEM: return this.renderItem(value, index);\n            case CELL_TYPE_HEADER: return this.renderHeader(value, index);\n            case CELL_TYPE_FOOTER: return this.renderFooter(value, index);\n        }\n    }\n    render() {\n        return (h(Host, { style: {\n                height: `${this.totalHeight}px`\n            } }, this.renderItem && (h(VirtualProxy, { dom: this.virtualDom }, this.virtualDom.map(node => this.renderVirtualNode(node))))));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"itemHeight\": [\"itemsChanged\"],\n        \"headerHeight\": [\"itemsChanged\"],\n        \"footerHeight\": [\"itemsChanged\"],\n        \"items\": [\"itemsChanged\"]\n    }; }\n};\nconst VirtualProxy = ({ dom }, children, utils) => {\n    return utils.map(children, (child, i) => {\n        const node = dom[i];\n        const vattrs = child.vattrs || {};\n        let classes = vattrs.class || '';\n        classes += 'virtual-item ';\n        if (!node.visible) {\n            classes += 'virtual-loading';\n        }\n        return Object.assign(Object.assign({}, child), { vattrs: Object.assign(Object.assign({}, vattrs), { class: classes, style: Object.assign(Object.assign({}, vattrs.style), { transform: `translate3d(0,${node.top}px,0)` }) }) });\n    });\n};\nVirtualScroll.style = virtualScrollCss;\n\nexport { VirtualScroll as ion_virtual_scroll };\n"],"sourceRoot":""}