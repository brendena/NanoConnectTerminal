{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/tap-click-8339ee48.js"],"names":["startTapClick","config","scrollingEl","activatableEle","activeRipple","activeDefer","lastTouch","MOUSE_WAIT","lastActivated","useRippleEffect","getBoolean","clearDefers","WeakMap","onTouchEnd","ev","now","pointerUp","cancelActive","clearTimeout","undefined","removeActivated","pointerDown","parentElement","setActivatedElement","getActivatableTarget","el","pointerCoord","x","y","has","Error","classList","contains","ACTIVATED","addActivated","deferId","get","delete","delay","isInstant","ADD_ACTIVATED_DEFERS","remove","setTimeout","Date","add","rippleEffect","getRippleEffect","addRipple","removeRipple","then","smooth","active","time","CLEAR_STATE_DEFERS","set","doc","document","addEventListener","target","t","composedPath","closest","path","i","length","shadowRoot","ripple","querySelector"],"mappings":"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","file":"static/js/5.24aa83fd.chunk.js","sourcesContent":["import { n as now, p as pointerCoord } from './helpers-d8b49b57.js';\n\nconst startTapClick = (config) => {\n    let lastTouch = -MOUSE_WAIT * 10;\n    let lastActivated = 0;\n    let scrollingEl;\n    let activatableEle;\n    let activeRipple;\n    let activeDefer;\n    const useRippleEffect = config.getBoolean('animated', true) && config.getBoolean('rippleEffect', true);\n    const clearDefers = new WeakMap();\n    const isScrolling = () => {\n        return scrollingEl !== undefined && scrollingEl.parentElement !== null;\n    };\n    // Touch Events\n    const onTouchStart = (ev) => {\n        lastTouch = now(ev);\n        pointerDown(ev);\n    };\n    const onTouchEnd = (ev) => {\n        lastTouch = now(ev);\n        pointerUp(ev);\n    };\n    const onMouseDown = (ev) => {\n        const t = now(ev) - MOUSE_WAIT;\n        if (lastTouch < t) {\n            pointerDown(ev);\n        }\n    };\n    const onMouseUp = (ev) => {\n        const t = now(ev) - MOUSE_WAIT;\n        if (lastTouch < t) {\n            pointerUp(ev);\n        }\n    };\n    const cancelActive = () => {\n        clearTimeout(activeDefer);\n        activeDefer = undefined;\n        if (activatableEle) {\n            removeActivated(false);\n            activatableEle = undefined;\n        }\n    };\n    const pointerDown = (ev) => {\n        if (activatableEle || isScrolling()) {\n            return;\n        }\n        scrollingEl = undefined;\n        setActivatedElement(getActivatableTarget(ev), ev);\n    };\n    const pointerUp = (ev) => {\n        setActivatedElement(undefined, ev);\n    };\n    const setActivatedElement = (el, ev) => {\n        // do nothing\n        if (el && el === activatableEle) {\n            return;\n        }\n        clearTimeout(activeDefer);\n        activeDefer = undefined;\n        const { x, y } = pointerCoord(ev);\n        // deactivate selected\n        if (activatableEle) {\n            if (clearDefers.has(activatableEle)) {\n                throw new Error('internal error');\n            }\n            if (!activatableEle.classList.contains(ACTIVATED)) {\n                addActivated(activatableEle, x, y);\n            }\n            removeActivated(true);\n        }\n        // activate\n        if (el) {\n            const deferId = clearDefers.get(el);\n            if (deferId) {\n                clearTimeout(deferId);\n                clearDefers.delete(el);\n            }\n            const delay = isInstant(el) ? 0 : ADD_ACTIVATED_DEFERS;\n            el.classList.remove(ACTIVATED);\n            activeDefer = setTimeout(() => {\n                addActivated(el, x, y);\n                activeDefer = undefined;\n            }, delay);\n        }\n        activatableEle = el;\n    };\n    const addActivated = (el, x, y) => {\n        lastActivated = Date.now();\n        el.classList.add(ACTIVATED);\n        const rippleEffect = useRippleEffect && getRippleEffect(el);\n        if (rippleEffect && rippleEffect.addRipple) {\n            removeRipple();\n            activeRipple = rippleEffect.addRipple(x, y);\n        }\n    };\n    const removeRipple = () => {\n        if (activeRipple !== undefined) {\n            activeRipple.then(remove => remove());\n            activeRipple = undefined;\n        }\n    };\n    const removeActivated = (smooth) => {\n        removeRipple();\n        const active = activatableEle;\n        if (!active) {\n            return;\n        }\n        const time = CLEAR_STATE_DEFERS - Date.now() + lastActivated;\n        if (smooth && time > 0 && !isInstant(active)) {\n            const deferId = setTimeout(() => {\n                active.classList.remove(ACTIVATED);\n                clearDefers.delete(active);\n            }, CLEAR_STATE_DEFERS);\n            clearDefers.set(active, deferId);\n        }\n        else {\n            active.classList.remove(ACTIVATED);\n        }\n    };\n    const doc = document;\n    doc.addEventListener('ionScrollStart', ev => {\n        scrollingEl = ev.target;\n        cancelActive();\n    });\n    doc.addEventListener('ionScrollEnd', () => {\n        scrollingEl = undefined;\n    });\n    doc.addEventListener('ionGestureCaptured', cancelActive);\n    doc.addEventListener('touchstart', onTouchStart, true);\n    doc.addEventListener('touchcancel', onTouchEnd, true);\n    doc.addEventListener('touchend', onTouchEnd, true);\n    doc.addEventListener('mousedown', onMouseDown, true);\n    doc.addEventListener('mouseup', onMouseUp, true);\n};\nconst getActivatableTarget = (ev) => {\n    if (ev.composedPath) {\n        const path = ev.composedPath();\n        for (let i = 0; i < path.length - 2; i++) {\n            const el = path[i];\n            if (el.classList && el.classList.contains('ion-activatable')) {\n                return el;\n            }\n        }\n    }\n    else {\n        return ev.target.closest('.ion-activatable');\n    }\n};\nconst isInstant = (el) => {\n    return el.classList.contains('ion-activatable-instant');\n};\nconst getRippleEffect = (el) => {\n    if (el.shadowRoot) {\n        const ripple = el.shadowRoot.querySelector('ion-ripple-effect');\n        if (ripple) {\n            return ripple;\n        }\n    }\n    return el.querySelector('ion-ripple-effect');\n};\nconst ACTIVATED = 'ion-activated';\nconst ADD_ACTIVATED_DEFERS = 200;\nconst CLEAR_STATE_DEFERS = 200;\nconst MOUSE_WAIT = 2500;\n\nexport { startTapClick };\n"],"sourceRoot":""}