{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/input-shims-af289659.js"],"names":["cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","appendChild","set","tx","ownerDocument","dir","style","pointerEvents","transform","clone","get","delete","remove","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","addEventListener","removeEventListener","SKIP_SELECTOR","calcScrollData","inputRect","contentRect","keyboardHeight","platformHeight","inputTop","top","inputBottom","bottom","visibleAreaTop","safeAreaTop","distanceToBottom","Math","min","distanceToTop","desiredScrollAmount","round","scrollAmount","duration","abs","scrollDuration","max","scrollPadding","inputSafeY","enableScrollAssist","contentEl","coord","touchStart","ev","pointerCoord","touchEnd","endCoord","hasPointerMoved","preventDefault","stopPropagation","jsSetFocus","scrollData","itemEl","closest","getBoundingClientRect","defaultView","innerHeight","getScrollData","focus","window","scrollContentTimeout","scrollContent","a","undefined","clearTimeout","scrollByPoint","setTimeout","threshold","startCoord","deltaX","x","deltaY","y","setScrollPadding","tagName","parentElement","el","timer","setProperty","startInputShims","config","doc","document","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","registerInput","componentOnReady","inputRoot","shadowRoot","querySelector","rmFn","focused","didScroll","onScroll","onFocusin","onTouchend","active","matches","tapped","target","blur","enableInputBlurring","onFocusout","enableScrollPadding","detail","fn","unregisterInput"],"mappings":"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","file":"static/js/2.4689c923.chunk.js","sourcesContent":["import { p as pointerCoord } from './helpers-d8b49b57.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0) => {\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nconst isFocused = (input) => {\n    return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY) => {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    const parentEl = inputEl.parentNode;\n    // DOM WRITES\n    const clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    const doc = componentEl.ownerDocument;\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n    const clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n    if (!scrollEl || !inputEl) {\n        return () => { return; };\n    }\n    const scrollHideCaret = (shouldHideCaret) => {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\n    const hideCaret = () => scrollHideCaret(true);\n    const showCaret = () => scrollHideCaret(false);\n    scrollEl.addEventListener('ionScrollStart', hideCaret);\n    scrollEl.addEventListener('ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return () => {\n        scrollEl.removeEventListener('ionScrollStart', hideCaret);\n        scrollEl.removeEventListener('ionScrollEnd', showCaret);\n        inputEl.addEventListener('ionBlur', onBlur);\n    };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur]';\nconst enableInputBlurring = () => {\n    let focused = true;\n    let didScroll = false;\n    const doc = document;\n    const onScroll = () => {\n        didScroll = true;\n    };\n    const onFocusin = () => {\n        focused = true;\n    };\n    const onTouchend = (ev) => {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        const active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        const tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO: find a better way, why 50ms?\n        setTimeout(() => {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    doc.addEventListener('ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return () => {\n        doc.removeEventListener('ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight) => {\n    const itemEl = componentEl.closest('ion-item,[ion-item]') || componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, componentEl.ownerDocument.defaultView.innerHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n    // compute input's Y values relative to the body\n    const inputTop = inputRect.top;\n    const inputBottom = inputRect.bottom;\n    // compute visible area\n    const visibleAreaTop = contentRect.top;\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    const safeAreaTop = visibleAreaTop + 15;\n    const safeAreaBottom = visibleAreaBottom * 0.5;\n    // figure out if each edge of the input is within the safe area\n    const distanceToBottom = safeAreaBottom - inputBottom;\n    const distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    const desiredScrollAmount = Math.round((distanceToBottom < 0)\n        ? -distanceToBottom\n        : (distanceToTop > 0)\n            ? -distanceToTop\n            : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    const distance = Math.abs(scrollAmount);\n    const duration = distance / SCROLL_ASSIST_SPEED;\n    const scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount,\n        scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4\n    };\n};\n\nconst enableScrollAssist = (componentEl, inputEl, contentEl, keyboardHeight) => {\n    let coord;\n    const touchStart = (ev) => {\n        coord = pointerCoord(ev);\n    };\n    const touchEnd = (ev) => {\n        // input cover touchend/mouseup\n        if (!coord) {\n            return;\n        }\n        // get where the touchend/mouseup ended\n        const endCoord = pointerCoord(ev);\n        // focus this input if the pointer hasn't moved XX pixels\n        // and the input doesn't already have focus\n        if (!hasPointerMoved(6, coord, endCoord) && !isFocused(inputEl)) {\n            ev.preventDefault();\n            ev.stopPropagation();\n            // begin the input focus process\n            jsSetFocus(componentEl, inputEl, contentEl, keyboardHeight);\n        }\n    };\n    componentEl.addEventListener('touchstart', touchStart, true);\n    componentEl.addEventListener('touchend', touchEnd, true);\n    return () => {\n        componentEl.removeEventListener('touchstart', touchStart, true);\n        componentEl.removeEventListener('touchend', touchEnd, true);\n    };\n};\nconst jsSetFocus = (componentEl, inputEl, contentEl, keyboardHeight) => {\n    const scrollData = getScrollData(componentEl, contentEl, keyboardHeight);\n    if (Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        inputEl.focus();\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY);\n    inputEl.focus();\n    /* tslint:disable-next-line */\n    if (typeof window !== 'undefined') {\n        let scrollContentTimeout;\n        const scrollContent = async () => {\n            // clean up listeners and timeouts\n            if (scrollContentTimeout !== undefined) {\n                clearTimeout(scrollContentTimeout);\n            }\n            window.removeEventListener('resize', scrollContent);\n            // scroll the input into place\n            await contentEl.scrollByPoint(0, scrollData.scrollAmount, scrollData.scrollDuration);\n            // the scroll view is in the correct position now\n            // give the native text input focus\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n            // ensure this is the focused input\n            inputEl.focus();\n        };\n        window.addEventListener('resize', scrollContent);\n        // fallback in case resize never fires\n        scrollContentTimeout = setTimeout(scrollContent, 1000);\n    }\n};\nconst hasPointerMoved = (threshold, startCoord, endCoord) => {\n    if (startCoord && endCoord) {\n        const deltaX = (startCoord.x - endCoord.x);\n        const deltaY = (startCoord.y - endCoord.y);\n        const distance = deltaX * deltaX + deltaY * deltaY;\n        return distance > (threshold * threshold);\n    }\n    return false;\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\nconst enableScrollPadding = (keyboardHeight) => {\n    const doc = document;\n    const onFocusin = (ev) => {\n        setScrollPadding(ev.target, keyboardHeight);\n    };\n    const onFocusout = (ev) => {\n        setScrollPadding(ev.target, 0);\n    };\n    doc.addEventListener('focusin', onFocusin);\n    doc.addEventListener('focusout', onFocusout);\n    return () => {\n        doc.removeEventListener('focusin', onFocusin);\n        doc.removeEventListener('focusout', onFocusout);\n    };\n};\nconst setScrollPadding = (input, keyboardHeight) => {\n    if (input.tagName !== 'INPUT') {\n        return;\n    }\n    if (input.parentElement && input.parentElement.tagName === 'ION-INPUT') {\n        return;\n    }\n    if (input.parentElement &&\n        input.parentElement.parentElement &&\n        input.parentElement.parentElement.tagName === 'ION-SEARCHBAR') {\n        return;\n    }\n    const el = input.closest('ion-content');\n    if (el === null) {\n        return;\n    }\n    const timer = el[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (keyboardHeight > 0) {\n        el.style.setProperty('--keyboard-offset', `${keyboardHeight}px`);\n    }\n    else {\n        el[PADDING_TIMER_KEY] = setTimeout(() => {\n            el.style.setProperty('--keyboard-offset', '0px');\n        }, 120);\n    }\n};\n\nconst INPUT_BLURRING = true;\nconst SCROLL_PADDING = true;\nconst startInputShims = (config) => {\n    const doc = document;\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', true);\n    const inputBlurring = config.getBoolean('inputBlurring', true);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    const registerInput = async (componentEl) => {\n        if (componentEl.componentOnReady) {\n            await componentEl.componentOnReady();\n        }\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = componentEl.closest('ion-content');\n        if (!inputEl) {\n            return;\n        }\n        if ( !!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        if ( !!scrollEl && scrollAssist && !scrollAssistMap.has(componentEl)) {\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, keyboardHeight);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    const unregisterInput = (componentEl) => {\n        if ( hideCaret) {\n            const fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if ( scrollAssist) {\n            const fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    if (scrollPadding && SCROLL_PADDING) {\n        enableScrollPadding(keyboardHeight);\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', ((ev) => {\n        registerInput(ev.detail);\n    }));\n    doc.addEventListener('ionInputDidUnload', ((ev) => {\n        unregisterInput(ev.detail);\n    }));\n};\n\nexport { startInputShims };\n"],"sourceRoot":""}