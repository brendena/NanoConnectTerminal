{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-infinite-scroll_2-md.entry.js","../node_modules/@ionic/core/dist/esm-es5/index-729ec402.js"],"names":["InfiniteScroll","hostRef","registerInstance","this","thrPx","thrPc","didFire","isBusy","isLoading","threshold","disabled","position","onScroll","scrollEl","canStart","infiniteHeight","el","offsetHeight","scrollTop","scrollHeight","height","ionInfinite","emit","createEvent","val","lastIndexOf","parseFloat","enableScrollEvents","contentEl","closest","console","error","getScrollElement","thresholdChanged","disabledChanged","writeTask","clientHeight","undefined","prev","requestAnimationFrame","readTask","newScrollTop","shouldListen","addEventListener","removeEventListener","mode","getIonMode","h","Host","class","getElement","style","InfiniteScrollContent","loadingSpinner","config","get","name","loadingText","innerHTML","sanitizeDOMString","ios","md","untrustedString","documentFragment","document","createDocumentFragment","workingDiv","createElement","appendChild","blockedTags","forEach","blockedTag","getElementsToRemove","querySelectorAll","elementIndex","length","element","parentNode","removeChild","childElements","getElementChildren","childIndex","sanitizeElement","dfChildren","fragmentDiv","getInnerDiv","querySelector","err","nodeType","i","attributes","attribute","item","attributeName","allowedAttributes","includes","toLowerCase","attributeValue","value","removeAttribute","children","childNodes"],"mappings":"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","file":"static/js/stencil-ion-infinite-scroll_2-md-entry-js.f565a967.chunk.js","sourcesContent":["import { r as registerInstance, d as createEvent, w as writeTask, f as readTask, h, e as getElement, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode, c as config } from './ionic-global-a175fa73.js';\nimport { s as sanitizeDOMString } from './index-729ec402.js';\n\nconst infiniteScrollCss = \"ion-infinite-scroll{display:none;width:100%}.infinite-scroll-enabled{display:block}\";\n\nconst InfiniteScroll = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.thrPx = 0;\n        this.thrPc = 0;\n        this.didFire = false;\n        this.isBusy = false;\n        this.isLoading = false;\n        /**\n         * The threshold distance from the bottom\n         * of the content to call the `infinite` output event when scrolled.\n         * The threshold value can be either a percent, or\n         * in pixels. For example, use the value of `10%` for the `infinite`\n         * output event to get called when the user has scrolled 10%\n         * from the bottom of the page. Use the value `100px` when the\n         * scroll is within 100 pixels from the bottom of the page.\n         */\n        this.threshold = '15%';\n        /**\n         * If `true`, the infinite scroll will be hidden and scroll event listeners\n         * will be removed.\n         *\n         * Set this to true to disable the infinite scroll from actively\n         * trying to receive new data while scrolling. This is useful\n         * when it is known that there is no more data that can be added, and\n         * the infinite scroll is no longer needed.\n         */\n        this.disabled = false;\n        /**\n         * The position of the infinite scroll element.\n         * The value can be either `top` or `bottom`.\n         */\n        this.position = 'bottom';\n        this.onScroll = () => {\n            const scrollEl = this.scrollEl;\n            if (!scrollEl || !this.canStart()) {\n                return 1;\n            }\n            const infiniteHeight = this.el.offsetHeight;\n            if (infiniteHeight === 0) {\n                // if there is no height of this element then do nothing\n                return 2;\n            }\n            const scrollTop = scrollEl.scrollTop;\n            const scrollHeight = scrollEl.scrollHeight;\n            const height = scrollEl.offsetHeight;\n            const threshold = this.thrPc !== 0 ? (height * this.thrPc) : this.thrPx;\n            const distanceFromInfinite = (this.position === 'bottom')\n                ? scrollHeight - infiniteHeight - scrollTop - threshold - height\n                : scrollTop - infiniteHeight - threshold;\n            if (distanceFromInfinite < 0) {\n                if (!this.didFire) {\n                    this.isLoading = true;\n                    this.didFire = true;\n                    this.ionInfinite.emit();\n                    return 3;\n                }\n            }\n            else {\n                this.didFire = false;\n            }\n            return 4;\n        };\n        this.ionInfinite = createEvent(this, \"ionInfinite\", 7);\n    }\n    thresholdChanged() {\n        const val = this.threshold;\n        if (val.lastIndexOf('%') > -1) {\n            this.thrPx = 0;\n            this.thrPc = (parseFloat(val) / 100);\n        }\n        else {\n            this.thrPx = parseFloat(val);\n            this.thrPc = 0;\n        }\n    }\n    disabledChanged() {\n        const disabled = this.disabled;\n        if (disabled) {\n            this.isLoading = false;\n            this.isBusy = false;\n        }\n        this.enableScrollEvents(!disabled);\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (!contentEl) {\n            console.error('<ion-infinite-scroll> must be used inside an <ion-content>');\n            return;\n        }\n        this.scrollEl = await contentEl.getScrollElement();\n        this.thresholdChanged();\n        this.disabledChanged();\n        if (this.position === 'top') {\n            writeTask(() => {\n                if (this.scrollEl) {\n                    this.scrollEl.scrollTop = this.scrollEl.scrollHeight - this.scrollEl.clientHeight;\n                }\n            });\n        }\n    }\n    disconnectedCallback() {\n        this.enableScrollEvents(false);\n        this.scrollEl = undefined;\n    }\n    /**\n     * Call `complete()` within the `ionInfinite` output event handler when\n     * your async operation has completed. For example, the `loading`\n     * state is while the app is performing an asynchronous operation,\n     * such as receiving more data from an AJAX request to add more items\n     * to a data list. Once the data has been received and UI updated, you\n     * then call this method to signify that the loading has completed.\n     * This method will change the infinite scroll's state from `loading`\n     * to `enabled`.\n     */\n    async complete() {\n        const scrollEl = this.scrollEl;\n        if (!this.isLoading || !scrollEl) {\n            return;\n        }\n        this.isLoading = false;\n        if (this.position === 'top') {\n            /**\n             * New content is being added at the top, but the scrollTop position stays the same,\n             * which causes a scroll jump visually. This algorithm makes sure to prevent this.\n             * (Frame 1)\n             *    - complete() is called, but the UI hasn't had time to update yet.\n             *    - Save the current content dimensions.\n             *    - Wait for the next frame using _dom.read, so the UI will be updated.\n             * (Frame 2)\n             *    - Read the new content dimensions.\n             *    - Calculate the height difference and the new scroll position.\n             *    - Delay the scroll position change until other possible dom reads are done using _dom.write to be performant.\n             * (Still frame 2, if I'm correct)\n             *    - Change the scroll position (= visually maintain the scroll position).\n             *    - Change the state to re-enable the InfiniteScroll.\n             *    - This should be after changing the scroll position, or it could\n             *    cause the InfiniteScroll to be triggered again immediately.\n             * (Frame 3)\n             *    Done.\n             */\n            this.isBusy = true;\n            // ******** DOM READ ****************\n            // Save the current content dimensions before the UI updates\n            const prev = scrollEl.scrollHeight - scrollEl.scrollTop;\n            // ******** DOM READ ****************\n            requestAnimationFrame(() => {\n                readTask(() => {\n                    // UI has updated, save the new content dimensions\n                    const scrollHeight = scrollEl.scrollHeight;\n                    // New content was added on top, so the scroll position should be changed immediately to prevent it from jumping around\n                    const newScrollTop = scrollHeight - prev;\n                    // ******** DOM WRITE ****************\n                    requestAnimationFrame(() => {\n                        writeTask(() => {\n                            scrollEl.scrollTop = newScrollTop;\n                            this.isBusy = false;\n                        });\n                    });\n                });\n            });\n        }\n    }\n    canStart() {\n        return (!this.disabled &&\n            !this.isBusy &&\n            !!this.scrollEl &&\n            !this.isLoading);\n    }\n    enableScrollEvents(shouldListen) {\n        if (this.scrollEl) {\n            if (shouldListen) {\n                this.scrollEl.addEventListener('scroll', this.onScroll);\n            }\n            else {\n                this.scrollEl.removeEventListener('scroll', this.onScroll);\n            }\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        const disabled = this.disabled;\n        return (h(Host, { class: {\n                [mode]: true,\n                'infinite-scroll-loading': this.isLoading,\n                'infinite-scroll-enabled': !disabled\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"threshold\": [\"thresholdChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nInfiniteScroll.style = infiniteScrollCss;\n\nconst infiniteScrollContentIosCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-ios .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-lines-small-ios line,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-ios .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-ios .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst infiniteScrollContentMdCss = \"ion-infinite-scroll-content{display:-ms-flexbox;display:flex;-ms-flex-direction:column;flex-direction:column;-ms-flex-pack:center;justify-content:center;min-height:84px;text-align:center;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.infinite-loading{margin-left:0;margin-right:0;margin-top:0;margin-bottom:32px;display:none;width:100%}.infinite-loading-text{margin-left:32px;margin-right:32px;margin-top:4px;margin-bottom:0}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){.infinite-loading-text{margin-left:unset;margin-right:unset;-webkit-margin-start:32px;margin-inline-start:32px;-webkit-margin-end:32px;margin-inline-end:32px}}.infinite-scroll-loading ion-infinite-scroll-content>.infinite-loading{display:block}.infinite-scroll-content-md .infinite-loading-text{color:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-lines-small-md line,.infinite-scroll-content-md .infinite-loading-spinner .spinner-crescent circle{stroke:var(--ion-color-step-600, #666666)}.infinite-scroll-content-md .infinite-loading-spinner .spinner-bubbles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-circles circle,.infinite-scroll-content-md .infinite-loading-spinner .spinner-dots circle{fill:var(--ion-color-step-600, #666666)}\";\n\nconst InfiniteScrollContent = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    componentDidLoad() {\n        if (this.loadingSpinner === undefined) {\n            const mode = getIonMode(this);\n            this.loadingSpinner = config.get('infiniteLoadingSpinner', config.get('spinner', mode === 'ios' ? 'lines' : 'crescent'));\n        }\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                // Used internally for styling\n                [`infinite-scroll-content-${mode}`]: true\n            } }, h(\"div\", { class: \"infinite-loading\" }, this.loadingSpinner && (h(\"div\", { class: \"infinite-loading-spinner\" }, h(\"ion-spinner\", { name: this.loadingSpinner }))), this.loadingText && (h(\"div\", { class: \"infinite-loading-text\", innerHTML: sanitizeDOMString(this.loadingText) })))));\n    }\n};\nInfiniteScrollContent.style = {\n    /*STENCIL:MODE:ios*/ ios: infiniteScrollContentIosCss,\n    /*STENCIL:MODE:md*/ md: infiniteScrollContentMdCss\n};\n\nexport { InfiniteScroll as ion_infinite_scroll, InfiniteScrollContent as ion_infinite_scroll_content };\n","/**\n * Does a simple sanitization of all elements\n * in an untrusted string\n */\nconst sanitizeDOMString = (untrustedString) => {\n    try {\n        if (typeof untrustedString !== 'string' || untrustedString === '') {\n            return untrustedString;\n        }\n        /**\n         * Create a document fragment\n         * separate from the main DOM,\n         * create a div to do our work in\n         */\n        const documentFragment = document.createDocumentFragment();\n        const workingDiv = document.createElement('div');\n        documentFragment.appendChild(workingDiv);\n        workingDiv.innerHTML = untrustedString;\n        /**\n         * Remove any elements\n         * that are blocked\n         */\n        blockedTags.forEach(blockedTag => {\n            const getElementsToRemove = documentFragment.querySelectorAll(blockedTag);\n            for (let elementIndex = getElementsToRemove.length - 1; elementIndex >= 0; elementIndex--) {\n                const element = getElementsToRemove[elementIndex];\n                if (element.parentNode) {\n                    element.parentNode.removeChild(element);\n                }\n                else {\n                    documentFragment.removeChild(element);\n                }\n                /**\n                 * We still need to sanitize\n                 * the children of this element\n                 * as they are left behind\n                 */\n                const childElements = getElementChildren(element);\n                /* tslint:disable-next-line */\n                for (let childIndex = 0; childIndex < childElements.length; childIndex++) {\n                    sanitizeElement(childElements[childIndex]);\n                }\n            }\n        });\n        /**\n         * Go through remaining elements and remove\n         * non-allowed attribs\n         */\n        // IE does not support .children on document fragments, only .childNodes\n        const dfChildren = getElementChildren(documentFragment);\n        /* tslint:disable-next-line */\n        for (let childIndex = 0; childIndex < dfChildren.length; childIndex++) {\n            sanitizeElement(dfChildren[childIndex]);\n        }\n        // Append document fragment to div\n        const fragmentDiv = document.createElement('div');\n        fragmentDiv.appendChild(documentFragment);\n        // First child is always the div we did our work in\n        const getInnerDiv = fragmentDiv.querySelector('div');\n        return (getInnerDiv !== null) ? getInnerDiv.innerHTML : fragmentDiv.innerHTML;\n    }\n    catch (err) {\n        console.error(err);\n        return '';\n    }\n};\n/**\n * Clean up current element based on allowed attributes\n * and then recursively dig down into any child elements to\n * clean those up as well\n */\nconst sanitizeElement = (element) => {\n    // IE uses childNodes, so ignore nodes that are not elements\n    if (element.nodeType && element.nodeType !== 1) {\n        return;\n    }\n    for (let i = element.attributes.length - 1; i >= 0; i--) {\n        const attribute = element.attributes.item(i);\n        const attributeName = attribute.name;\n        // remove non-allowed attribs\n        if (!allowedAttributes.includes(attributeName.toLowerCase())) {\n            element.removeAttribute(attributeName);\n            continue;\n        }\n        // clean up any allowed attribs\n        // that attempt to do any JS funny-business\n        const attributeValue = attribute.value;\n        /* tslint:disable-next-line */\n        if (attributeValue != null && attributeValue.toLowerCase().includes('javascript:')) {\n            element.removeAttribute(attributeName);\n        }\n    }\n    /**\n     * Sanitize any nested children\n     */\n    const childElements = getElementChildren(element);\n    /* tslint:disable-next-line */\n    for (let i = 0; i < childElements.length; i++) {\n        sanitizeElement(childElements[i]);\n    }\n};\n/**\n * IE doesn't always support .children\n * so we revert to .childNodes instead\n */\nconst getElementChildren = (el) => {\n    return (el.children != null) ? el.children : el.childNodes;\n};\nconst allowedAttributes = ['class', 'id', 'href', 'src', 'name', 'slot'];\nconst blockedTags = ['script', 'style', 'iframe', 'meta', 'link', 'object', 'embed'];\n\nexport { sanitizeDOMString as s };\n"],"sourceRoot":""}