{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-checkbox-ios.entry.js","../node_modules/@ionic/core/dist/esm-es5/theme-c2dc54d9.js"],"names":["Checkbox","hostRef","registerInstance","this","inputId","checkboxIds","name","checked","indeterminate","disabled","value","onClick","setFocus","onFocus","ionFocus","emit","onBlur","ionBlur","ionChange","createEvent","ionStyle","emitStyle","isChecked","buttonEl","focus","color","el","labelId","mode","getIonMode","label","findItemLabel","id","renderHiddenInput","path","h","d","Host","role","class","Object","assign","createColorClasses","hostContext","viewBox","type","ref","btnEl","getElement","style","ios","md","selector","closest","length","undefined","getClassMap","classes","map","Array","isArray","split","filter","c","trim","getClassList","forEach","SCHEME","openURL","url","ev","direction","a","test","router","document","querySelector","preventDefault","push"],"mappings":"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","file":"static/js/stencil-ion-checkbox-ios-entry-js.a92f9282.chunk.js","sourcesContent":["import { r as registerInstance, d as createEvent, h, H as Host, e as getElement } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\nimport { f as findItemLabel, a as renderHiddenInput } from './helpers-d8b49b57.js';\nimport { c as createColorClasses, h as hostContext } from './theme-c2dc54d9.js';\n\nconst checkboxIosCss = \":host{--background-checked:var(--ion-color-primary, #3880ff);--border-color-checked:var(--ion-color-primary, #3880ff);--checkmark-color:var(--ion-color-primary-contrast, #fff);--checkmark-width:1;--transition:none;display:inline-block;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.ion-color){--background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.checkbox-icon{border-radius:var(--border-radius);display:block;position:relative;width:100%;height:100%;-webkit-transition:var(--transition);transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-sizing:border-box;box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:50%;--border-width:1px;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.23);--background:var(--ion-item-background, var(--ion-background-color, #fff));--size:26px;width:var(--size);height:var(--size)}:host(.checkbox-disabled){opacity:0.3}:host(.in-item){margin-left:0;margin-right:8px;margin-top:10px;margin-bottom:9px;display:block;position:static}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item){margin-left:unset;margin-right:unset;-webkit-margin-start:0;margin-inline-start:0;-webkit-margin-end:8px;margin-inline-end:8px}}:host(.in-item[slot=start]){margin-left:2px;margin-right:20px;margin-top:8px;margin-bottom:8px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:20px;margin-inline-end:20px}}\";\n\nconst checkboxMdCss = \":host{--background-checked:var(--ion-color-primary, #3880ff);--border-color-checked:var(--ion-color-primary, #3880ff);--checkmark-color:var(--ion-color-primary-contrast, #fff);--checkmark-width:1;--transition:none;display:inline-block;position:relative;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;z-index:2}:host(.ion-color){--background-checked:var(--ion-color-base);--border-color-checked:var(--ion-color-base);--checkmark-color:var(--ion-color-contrast)}button{left:0;top:0;margin-left:0;margin-right:0;margin-top:0;margin-bottom:0;position:absolute;width:100%;height:100%;border:0;background:transparent;cursor:pointer;-webkit-appearance:none;-moz-appearance:none;appearance:none;outline:none}[dir=rtl] button,:host-context([dir=rtl]) button{left:unset;right:unset;right:0}button::-moz-focus-inner{border:0}.checkbox-icon{border-radius:var(--border-radius);display:block;position:relative;width:100%;height:100%;-webkit-transition:var(--transition);transition:var(--transition);border-width:var(--border-width);border-style:var(--border-style);border-color:var(--border-color);background:var(--background);-webkit-box-sizing:border-box;box-sizing:border-box}.checkbox-icon path{fill:none;stroke:var(--checkmark-color);stroke-width:var(--checkmark-width);opacity:0}:host(.checkbox-checked) .checkbox-icon,:host(.checkbox-indeterminate) .checkbox-icon{border-color:var(--border-color-checked);background:var(--background-checked)}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{opacity:1}:host(.checkbox-disabled){pointer-events:none}:host{--border-radius:calc(var(--size) * .125);--border-width:2px;--border-style:solid;--border-color:rgba(var(--ion-text-color-rgb, 0, 0, 0), 0.51);--checkmark-width:3;--background:var(--ion-item-background, var(--ion-background-color, #fff));--transition:background 180ms cubic-bezier(0.4, 0, 0.2, 1);--size:18px;width:var(--size);height:var(--size)}.checkbox-icon path{stroke-dasharray:30;stroke-dashoffset:30}:host(.checkbox-checked) .checkbox-icon path,:host(.checkbox-indeterminate) .checkbox-icon path{stroke-dashoffset:0;-webkit-transition:stroke-dashoffset 90ms linear 90ms;transition:stroke-dashoffset 90ms linear 90ms}:host(.checkbox-disabled){opacity:0.3}:host(.in-item){margin-left:0;margin-right:0;margin-top:18px;margin-bottom:18px;display:block;position:static}:host(.in-item[slot=start]){margin-left:4px;margin-right:36px;margin-top:18px;margin-bottom:18px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.in-item[slot=start]){margin-left:unset;margin-right:unset;-webkit-margin-start:4px;margin-inline-start:4px;-webkit-margin-end:36px;margin-inline-end:36px}}\";\n\nconst Checkbox = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.inputId = `ion-cb-${checkboxIds++}`;\n        /**\n         * The name of the control, which is submitted with the form data.\n         */\n        this.name = this.inputId;\n        /**\n         * If `true`, the checkbox is selected.\n         */\n        this.checked = false;\n        /**\n         * If `true`, the checkbox will visually appear as indeterminate.\n         */\n        this.indeterminate = false;\n        /**\n         * If `true`, the user cannot interact with the checkbox.\n         */\n        this.disabled = false;\n        /**\n         * The value of the toggle does not mean if it's checked or not, use the `checked`\n         * property for that.\n         *\n         * The value of a toggle is analogous to the value of a `<input type=\"checkbox\">`,\n         * it's only used when the toggle participates in a native `<form>`.\n         */\n        this.value = 'on';\n        this.onClick = () => {\n            this.setFocus();\n            this.checked = !this.checked;\n            this.indeterminate = false;\n        };\n        this.onFocus = () => {\n            this.ionFocus.emit();\n        };\n        this.onBlur = () => {\n            this.ionBlur.emit();\n        };\n        this.ionChange = createEvent(this, \"ionChange\", 7);\n        this.ionFocus = createEvent(this, \"ionFocus\", 7);\n        this.ionBlur = createEvent(this, \"ionBlur\", 7);\n        this.ionStyle = createEvent(this, \"ionStyle\", 7);\n    }\n    componentWillLoad() {\n        this.emitStyle();\n    }\n    checkedChanged(isChecked) {\n        this.ionChange.emit({\n            checked: isChecked,\n            value: this.value\n        });\n        this.emitStyle();\n    }\n    disabledChanged() {\n        this.emitStyle();\n    }\n    emitStyle() {\n        this.ionStyle.emit({\n            'checkbox-checked': this.checked,\n            'interactive-disabled': this.disabled,\n        });\n    }\n    setFocus() {\n        if (this.buttonEl) {\n            this.buttonEl.focus();\n        }\n    }\n    render() {\n        const { inputId, indeterminate, disabled, checked, value, color, el } = this;\n        const labelId = inputId + '-lbl';\n        const mode = getIonMode(this);\n        const label = findItemLabel(el);\n        if (label) {\n            label.id = labelId;\n        }\n        renderHiddenInput(true, el, this.name, (checked ? value : ''), disabled);\n        let path = indeterminate\n            ? h(\"path\", { d: \"M6 12L18 12\" })\n            : h(\"path\", { d: \"M5.9,12.5l3.8,3.8l8.8-8.8\" });\n        if (mode === 'md') {\n            path = indeterminate\n                ? h(\"path\", { d: \"M2 12H22\" })\n                : h(\"path\", { d: \"M1.73,12.91 8.1,19.28 22.79,4.59\" });\n        }\n        return (h(Host, { onClick: this.onClick, role: \"checkbox\", \"aria-disabled\": disabled ? 'true' : null, \"aria-checked\": `${checked}`, \"aria-labelledby\": labelId, class: Object.assign(Object.assign({}, createColorClasses(color)), { [mode]: true, 'in-item': hostContext('ion-item', el), 'checkbox-checked': checked, 'checkbox-disabled': disabled, 'checkbox-indeterminate': indeterminate, 'interactive': true }) }, h(\"svg\", { class: \"checkbox-icon\", viewBox: \"0 0 24 24\" }, path), h(\"button\", { type: \"button\", onFocus: this.onFocus, onBlur: this.onBlur, disabled: this.disabled, ref: btnEl => this.buttonEl = btnEl })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"checked\": [\"checkedChanged\"],\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nlet checkboxIds = 0;\nCheckbox.style = {\n    /*STENCIL:MODE:ios*/ ios: checkboxIosCss,\n    /*STENCIL:MODE:md*/ md: checkboxMdCss\n};\n\nexport { Checkbox as ion_checkbox };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"sourceRoot":""}