{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-nav_2.entry.js","../node_modules/@ionic/core/dist/esm-es5/framework-delegate-d1eb6504.js"],"names":["ViewController","component","params","this","state","container","element","attachComponent","delegate","assert","removeViewFromDom","parentElement","remove","nav","undefined","matches","view","id","currentParams","keysA","Object","keys","keysB","length","key","convertToView","page","Nav","hostRef","registerInstance","transInstr","animationEnabled","useRouter","isTransitioning","destroyed","views","animated","ionNavWillLoad","createEvent","ionNavWillChange","ionNavDidChange","gesture","enable","swipeGesture","root","setRoot","rootParams","document","querySelector","el","closest","mode","getIonMode","config","getBoolean","emit","rootChanged","createSwipeBackGesture","canStart","bind","onStart","onMove","onEnd","swipeGestureChanged","lifecycle","LIFECYCLE_WILL_UNLOAD","_destroy","destroy","componentProps","opts","done","queueTrns","insertStart","insertViews","insertIndex","insertComponents","removeStart","removeCount","indexOrViewCtrl","tiConfig","removeView","startIndex","setPages","direction","resolve","active","getActiveSync","Promise","changed","finish","promise","r","commonOpts","updateURL","viewIsReady","enteringEl","mark","p","markVisible","a","viewController","find","v","popTo","assign","push","tagName","index","canGoBackSync","getPreviousSync","indexOf","ti","skipIfBusy","reject","nextTrns","result","fireError","hasCompleted","requiresTransition","enteringView","leavingView","router","navChanged","rejectReason","shift","runTransition","prepareTI","getEnteringView","Error","init","postViewInit","enteringRequiresTransition","leavingRequiresTransition","transition","success","failed","viewsLength","viewControllers","map","filter","removeEnd","i","destroyQueue","finalBalance","console","warn","insertViewAt","LIFECYCLE_WILL_LEAVE","LIFECYCLE_DID_LEAVE","destroyView","progressCallback","progressAnimation","ani","sbAni","leavingEl","animationOpts","showGoBack","baseEl","animationBuilder","animation","get","transitionFinish","cleanupView","cleanup","existingIndex","splice","activeView","activeViewIndex","setPageHidden","stepValue","progressStep","shouldComplete","dur","onFinish","oneTimeCallback","newStepValue","getTimeGivenProgression","easing","progressEnd","h","getElement","style","NavLink","routerDirection","onClick","pop","navLink","Host","cssClasses","attachViewToDom","HTMLElement","ownerDocument","createElement","forEach","c","classList","add","appendChild","componentOnReady","detachComponent"],"mappings":"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","file":"static/js/64.eb59a075.chunk.js","sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode, c as config } from './ionic-global-a175fa73.js';\nimport { b as assert } from './helpers-d8b49b57.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-157155ee.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-69ef585b.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n","const attachComponent = async (delegate, container, component, cssClasses, componentProps) => {\n    if (delegate) {\n        return delegate.attachViewToDom(container, component, componentProps, cssClasses);\n    }\n    if (typeof component !== 'string' && !(component instanceof HTMLElement)) {\n        throw new Error('framework delegate is missing');\n    }\n    const el = (typeof component === 'string')\n        ? container.ownerDocument && container.ownerDocument.createElement(component)\n        : component;\n    if (cssClasses) {\n        cssClasses.forEach(c => el.classList.add(c));\n    }\n    if (componentProps) {\n        Object.assign(el, componentProps);\n    }\n    container.appendChild(el);\n    if (el.componentOnReady) {\n        await el.componentOnReady();\n    }\n    return el;\n};\nconst detachComponent = (delegate, element) => {\n    if (element) {\n        if (delegate) {\n            const container = element.parentElement;\n            return delegate.removeViewFromDom(container, element);\n        }\n        element.remove();\n    }\n    return Promise.resolve();\n};\n\nexport { attachComponent as a, detachComponent as d };\n"],"sourceRoot":""}