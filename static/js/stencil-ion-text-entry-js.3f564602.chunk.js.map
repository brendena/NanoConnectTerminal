{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-text.entry.js","../node_modules/@ionic/core/dist/esm-es5/theme-c2dc54d9.js"],"names":["Text","hostRef","registerInstance","this","mode","getIonMode","h","Host","class","Object","assign","createColorClasses","color","style","hostContext","selector","el","closest","length","undefined","getClassMap","classes","map","Array","isArray","split","filter","c","trim","getClassList","forEach","SCHEME","openURL","url","ev","direction","a","test","router","document","querySelector","preventDefault","push"],"mappings":"oOAMMA,EAAI,WACN,WAAYC,GAAS,oBACjBC,YAAiBC,KAAMF,GAFrB,qDAKF,IAAMG,EAAOC,YAAWF,MACxB,OAAQG,YAAEC,IAAM,CAAEC,MAAOC,OAAOC,OAAOD,OAAOC,OAAO,GAAIC,YAAmBR,KAAKS,QAAxDH,OAAA,IAAAA,CAAA,GAAoEL,GAAO,KAAWE,YAAE,OAAQ,WANvH,KASVN,EAAKa,MAXW,kD,4MCJVC,EAAc,SAACC,EAAUC,GAC3B,OAAgC,OAAzBA,EAAGC,QAAQF,IAKhBJ,EAAqB,SAACC,GACxB,MAAyB,kBAAVA,GAAsBA,EAAMM,OAAS,EAA7C,aACH,aAAa,GADV,oBAEWN,IAAU,QACxBO,GAYFC,EAAc,SAACC,GACjB,IAAMC,EAAM,GAEZ,OAbiB,SAACD,GAClB,YAAgBF,IAAZE,GACcE,MAAMC,QAAQH,GAAWA,EAAUA,EAAQI,MAAM,MAE1DC,QAAO,SAAAC,GAAC,OAAS,MAALA,KACZL,KAAI,SAAAK,GAAC,OAAIA,EAAEC,UACXF,QAAO,SAAAC,GAAC,MAAU,KAANA,KAEd,GAIPE,CAAaR,GAASS,SAAQ,SAAAH,GAAC,OAAIL,EAAIK,IAAK,KACrCL,GAELS,EAAS,uBACTC,EAAO,uCAAG,WAAOC,EAAKC,EAAIC,GAAhB,eAAAC,EAAA,yDACD,MAAPH,GAA0B,MAAXA,EAAI,IAAeF,EAAOM,KAAKJ,GADtC,qBAEFK,EAASC,SAASC,cAAc,eAF9B,uBAIM,MAANN,GACAA,EAAGO,iBALH,kBAOGH,EAAOI,KAAKT,EAAKE,IAPpB,iCAUL,GAVK,2CAAH","file":"static/js/stencil-ion-text-entry-js.3f564602.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\nimport { c as createColorClasses } from './theme-c2dc54d9.js';\n\nconst textCss = \":host(.ion-color){color:var(--ion-color-base)}\";\n\nconst Text = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true }) }, h(\"slot\", null)));\n    }\n};\nText.style = textCss;\n\nexport { Text as ion_text };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"sourceRoot":""}