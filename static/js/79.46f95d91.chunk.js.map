{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-route_4.entry.js","../node_modules/@ionic/core/dist/esm-es5/theme-c2dc54d9.js"],"names":["Route","hostRef","registerInstance","this","url","ionRouteDataChanged","createEvent","newValue","emit","oldValue","keys1","Object","keys","keys2","length","key","onUpdate","RouteRedirect","ionRouteRedirectChanged","generatePath","segments","filter","s","join","chainToPath","chain","path","route","segment","param","params","slice","push","parsePath","split","map","trim","printRoutes","routes","console","group","forEach","r","ids","id","debug","groupEnd","printRedirects","redirects","redirect","to","from","writeNavState","root","direction","index","a","changed","outlet","searchNavNode","componentOnReady","setRouteId","result","element","markVisible","error","readNavState","node","getRouteId","undefined","QUERY","matches","querySelector","routeRedirect","find","input","i","expected","matchesRedirect","matchesIDs","len","Math","min","toLowerCase","matchesPath","inputPath","allparams","RouterSegments","matchesDefault","data","next","mergeParams","b","assign","routerIDsToChain","chains","match","maxMatches","plainIDs","score","routerPathToChain","matchedChain","computePriority","level","pow","shift","readRedirects","Array","children","el","tagName","readProp","readRoutes","flattenRouterTree","readRouteNodes","component","Error","componentProps","prop","hasAttribute","getAttribute","nodes","flattenNode","Router","previousPath","busy","state","lastState","useHash","ionRouteWillChange","ionRouteDidChange","document","body","Promise","resolve","window","addEventListener","once","onRoutesChanged","debounce","onRedirectChanged","bind","historyDirection","getPath","writeNavStateRoot","ev","detail","register","back","startsWith","URL","location","href","pathname","setPath","history","waitPromise","warn","safeWriteNavState","win","replaceState","title","redirectFrom","lock","unlock","p","routeEvent","routeChangeEvent","pushState","writePath","loc","hash","prefix","removePrefix","readPath","redirectFromPath","redirectedFrom","getElement","RouterLink","routerDirection","onClick","openURL","mode","getIonMode","attrs","rel","target","h","Host","class","createColorClasses","color","style","hostContext","selector","closest","getClassMap","classes","isArray","c","getClassList","SCHEME","test","router","preventDefault"],"mappings":"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","file":"static/js/79.46f95d91.chunk.js","sourcesContent":["import { r as registerInstance, d as createEvent, e as getElement, h, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\nimport { e as debounce } from './helpers-d8b49b57.js';\nimport { o as openURL, c as createColorClasses } from './theme-c2dc54d9.js';\n\nconst Route = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * Relative path that needs to match in order for this route to apply.\n         *\n         * Accepts paths similar to expressjs so that you can define parameters\n         * in the url /foo/:bar where bar would be available in incoming props.\n         */\n        this.url = '';\n        this.ionRouteDataChanged = createEvent(this, \"ionRouteDataChanged\", 7);\n    }\n    onUpdate(newValue) {\n        this.ionRouteDataChanged.emit(newValue);\n    }\n    onComponentProps(newValue, oldValue) {\n        if (newValue === oldValue) {\n            return;\n        }\n        const keys1 = newValue ? Object.keys(newValue) : [];\n        const keys2 = oldValue ? Object.keys(oldValue) : [];\n        if (keys1.length !== keys2.length) {\n            this.onUpdate(newValue);\n            return;\n        }\n        for (const key of keys1) {\n            if (newValue[key] !== oldValue[key]) {\n                this.onUpdate(newValue);\n                return;\n            }\n        }\n    }\n    connectedCallback() {\n        this.ionRouteDataChanged.emit();\n    }\n    static get watchers() { return {\n        \"url\": [\"onUpdate\"],\n        \"component\": [\"onUpdate\"],\n        \"componentProps\": [\"onComponentProps\"]\n    }; }\n};\n\nconst RouteRedirect = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.ionRouteRedirectChanged = createEvent(this, \"ionRouteRedirectChanged\", 7);\n    }\n    propDidChange() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    connectedCallback() {\n        this.ionRouteRedirectChanged.emit();\n    }\n    static get watchers() { return {\n        \"from\": [\"propDidChange\"],\n        \"to\": [\"propDidChange\"]\n    }; }\n};\n\nconst ROUTER_INTENT_NONE = 'root';\nconst ROUTER_INTENT_FORWARD = 'forward';\nconst ROUTER_INTENT_BACK = 'back';\n\nconst generatePath = (segments) => {\n    const path = segments\n        .filter(s => s.length > 0)\n        .join('/');\n    return '/' + path;\n};\nconst chainToPath = (chain) => {\n    const path = [];\n    for (const route of chain) {\n        for (const segment of route.path) {\n            if (segment[0] === ':') {\n                const param = route.params && route.params[segment.slice(1)];\n                if (!param) {\n                    return null;\n                }\n                path.push(param);\n            }\n            else if (segment !== '') {\n                path.push(segment);\n            }\n        }\n    }\n    return path;\n};\nconst writePath = (history, root, useHash, path, direction, state) => {\n    let url = generatePath([\n        ...parsePath(root),\n        ...path\n    ]);\n    if (useHash) {\n        url = '#' + url;\n    }\n    if (direction === ROUTER_INTENT_FORWARD) {\n        history.pushState(state, '', url);\n    }\n    else {\n        history.replaceState(state, '', url);\n    }\n};\nconst removePrefix = (prefix, path) => {\n    if (prefix.length > path.length) {\n        return null;\n    }\n    if (prefix.length <= 1 && prefix[0] === '') {\n        return path;\n    }\n    for (let i = 0; i < prefix.length; i++) {\n        if (prefix[i].length > 0 && prefix[i] !== path[i]) {\n            return null;\n        }\n    }\n    if (path.length === prefix.length) {\n        return [''];\n    }\n    return path.slice(prefix.length);\n};\nconst readPath = (loc, root, useHash) => {\n    let pathname = loc.pathname;\n    if (useHash) {\n        const hash = loc.hash;\n        pathname = (hash[0] === '#')\n            ? hash.slice(1)\n            : '';\n    }\n    const prefix = parsePath(root);\n    const path = parsePath(pathname);\n    return removePrefix(prefix, path);\n};\nconst parsePath = (path) => {\n    if (path == null) {\n        return [''];\n    }\n    const segments = path.split('/')\n        .map(s => s.trim())\n        .filter(s => s.length > 0);\n    if (segments.length === 0) {\n        return [''];\n    }\n    else {\n        return segments;\n    }\n};\n\nconst printRoutes = (routes) => {\n    console.group(`[ion-core] ROUTES[${routes.length}]`);\n    for (const chain of routes) {\n        const path = [];\n        chain.forEach(r => path.push(...r.path));\n        const ids = chain.map(r => r.id);\n        console.debug(`%c ${generatePath(path)}`, 'font-weight: bold; padding-left: 20px', '=>\\t', `(${ids.join(', ')})`);\n    }\n    console.groupEnd();\n};\nconst printRedirects = (redirects) => {\n    console.group(`[ion-core] REDIRECTS[${redirects.length}]`);\n    for (const redirect of redirects) {\n        if (redirect.to) {\n            console.debug('FROM: ', `$c ${generatePath(redirect.from)}`, 'font-weight: bold', ' TO: ', `$c ${generatePath(redirect.to)}`, 'font-weight: bold');\n        }\n    }\n    console.groupEnd();\n};\n\nconst writeNavState = async (root, chain, direction, index, changed = false) => {\n    try {\n        // find next navigation outlet in the DOM\n        const outlet = searchNavNode(root);\n        // make sure we can continue interacting the DOM, otherwise abort\n        if (index >= chain.length || !outlet) {\n            return changed;\n        }\n        await outlet.componentOnReady();\n        const route = chain[index];\n        const result = await outlet.setRouteId(route.id, route.params, direction);\n        // if the outlet changed the page, reset navigation to neutral (no direction)\n        // this means nested outlets will not animate\n        if (result.changed) {\n            direction = ROUTER_INTENT_NONE;\n            changed = true;\n        }\n        // recursively set nested outlets\n        changed = await writeNavState(result.element, chain, direction, index + 1, changed);\n        // once all nested outlets are visible let's make the parent visible too,\n        // using markVisible prevents flickering\n        if (result.markVisible) {\n            await result.markVisible();\n        }\n        return changed;\n    }\n    catch (e) {\n        console.error(e);\n        return false;\n    }\n};\nconst readNavState = async (root) => {\n    const ids = [];\n    let outlet;\n    let node = root;\n    // tslint:disable-next-line:no-constant-condition\n    while (true) {\n        outlet = searchNavNode(node);\n        if (outlet) {\n            const id = await outlet.getRouteId();\n            if (id) {\n                node = id.element;\n                id.element = undefined;\n                ids.push(id);\n            }\n            else {\n                break;\n            }\n        }\n        else {\n            break;\n        }\n    }\n    return { ids, outlet };\n};\nconst waitUntilNavNode = () => {\n    if (searchNavNode(document.body)) {\n        return Promise.resolve();\n    }\n    return new Promise(resolve => {\n        window.addEventListener('ionNavWillLoad', resolve, { once: true });\n    });\n};\nconst QUERY = ':not([no-router]) ion-nav, :not([no-router]) ion-tabs, :not([no-router]) ion-router-outlet';\nconst searchNavNode = (root) => {\n    if (!root) {\n        return undefined;\n    }\n    if (root.matches(QUERY)) {\n        return root;\n    }\n    const outlet = root.querySelector(QUERY);\n    return outlet ? outlet : undefined;\n};\n\nconst matchesRedirect = (input, route) => {\n    const { from, to } = route;\n    if (to === undefined) {\n        return false;\n    }\n    if (from.length > input.length) {\n        return false;\n    }\n    for (let i = 0; i < from.length; i++) {\n        const expected = from[i];\n        if (expected === '*') {\n            return true;\n        }\n        if (expected !== input[i]) {\n            return false;\n        }\n    }\n    return from.length === input.length;\n};\nconst routeRedirect = (path, routes) => {\n    return routes.find(route => matchesRedirect(path, route));\n};\nconst matchesIDs = (ids, chain) => {\n    const len = Math.min(ids.length, chain.length);\n    let i = 0;\n    for (; i < len; i++) {\n        if (ids[i].toLowerCase() !== chain[i].id) {\n            break;\n        }\n    }\n    return i;\n};\nconst matchesPath = (inputPath, chain) => {\n    const segments = new RouterSegments(inputPath);\n    let matchesDefault = false;\n    let allparams;\n    for (let i = 0; i < chain.length; i++) {\n        const path = chain[i].path;\n        if (path[0] === '') {\n            matchesDefault = true;\n        }\n        else {\n            for (const segment of path) {\n                const data = segments.next();\n                // data param\n                if (segment[0] === ':') {\n                    if (data === '') {\n                        return null;\n                    }\n                    allparams = allparams || [];\n                    const params = allparams[i] || (allparams[i] = {});\n                    params[segment.slice(1)] = data;\n                }\n                else if (data !== segment) {\n                    return null;\n                }\n            }\n            matchesDefault = false;\n        }\n    }\n    const matches = (matchesDefault)\n        ? matchesDefault === (segments.next() === '')\n        : true;\n    if (!matches) {\n        return null;\n    }\n    if (allparams) {\n        return chain.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, allparams[i])\n        }));\n    }\n    return chain;\n};\nconst mergeParams = (a, b) => {\n    if (!a && b) {\n        return b;\n    }\n    else if (a && !b) {\n        return a;\n    }\n    else if (a && b) {\n        return Object.assign(Object.assign({}, a), b);\n    }\n    return undefined;\n};\nconst routerIDsToChain = (ids, chains) => {\n    let match = null;\n    let maxMatches = 0;\n    const plainIDs = ids.map(i => i.id);\n    for (const chain of chains) {\n        const score = matchesIDs(plainIDs, chain);\n        if (score > maxMatches) {\n            match = chain;\n            maxMatches = score;\n        }\n    }\n    if (match) {\n        return match.map((route, i) => ({\n            id: route.id,\n            path: route.path,\n            params: mergeParams(route.params, ids[i] && ids[i].params)\n        }));\n    }\n    return null;\n};\nconst routerPathToChain = (path, chains) => {\n    let match = null;\n    let matches = 0;\n    for (const chain of chains) {\n        const matchedChain = matchesPath(path, chain);\n        if (matchedChain !== null) {\n            const score = computePriority(matchedChain);\n            if (score > matches) {\n                matches = score;\n                match = matchedChain;\n            }\n        }\n    }\n    return match;\n};\nconst computePriority = (chain) => {\n    let score = 1;\n    let level = 1;\n    for (const route of chain) {\n        for (const path of route.path) {\n            if (path[0] === ':') {\n                score += Math.pow(1, level);\n            }\n            else if (path !== '') {\n                score += Math.pow(2, level);\n            }\n            level++;\n        }\n    }\n    return score;\n};\nclass RouterSegments {\n    constructor(path) {\n        this.path = path.slice();\n    }\n    next() {\n        if (this.path.length > 0) {\n            return this.path.shift();\n        }\n        return '';\n    }\n}\n\nconst readRedirects = (root) => {\n    return Array.from(root.children)\n        .filter(el => el.tagName === 'ION-ROUTE-REDIRECT')\n        .map(el => {\n        const to = readProp(el, 'to');\n        return {\n            from: parsePath(readProp(el, 'from')),\n            to: to == null ? undefined : parsePath(to),\n        };\n    });\n};\nconst readRoutes = (root) => {\n    return flattenRouterTree(readRouteNodes(root));\n};\nconst readRouteNodes = (root, node = root) => {\n    return Array.from(node.children)\n        .filter(el => el.tagName === 'ION-ROUTE' && el.component)\n        .map(el => {\n        const component = readProp(el, 'component');\n        if (component == null) {\n            throw new Error('component missing in ion-route');\n        }\n        return {\n            path: parsePath(readProp(el, 'url')),\n            id: component.toLowerCase(),\n            params: el.componentProps,\n            children: readRouteNodes(root, el)\n        };\n    });\n};\nconst readProp = (el, prop) => {\n    if (prop in el) {\n        return el[prop];\n    }\n    if (el.hasAttribute(prop)) {\n        return el.getAttribute(prop);\n    }\n    return null;\n};\nconst flattenRouterTree = (nodes) => {\n    const routes = [];\n    for (const node of nodes) {\n        flattenNode([], routes, node);\n    }\n    return routes;\n};\nconst flattenNode = (chain, routes, node) => {\n    const s = chain.slice();\n    s.push({\n        id: node.id,\n        path: node.path,\n        params: node.params\n    });\n    if (node.children.length === 0) {\n        routes.push(s);\n        return;\n    }\n    for (const sub of node.children) {\n        flattenNode(s, routes, sub);\n    }\n};\n\nconst Router = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.previousPath = null;\n        this.busy = false;\n        this.state = 0;\n        this.lastState = 0;\n        /**\n         * By default `ion-router` will match the routes at the root path (\"/\").\n         * That can be changed when\n         *\n         */\n        this.root = '/';\n        /**\n         * The router can work in two \"modes\":\n         * - With hash: `/index.html#/path/to/page`\n         * - Without hash: `/path/to/page`\n         *\n         * Using one or another might depend in the requirements of your app and/or where it's deployed.\n         *\n         * Usually \"hash-less\" navigation works better for SEO and it's more user friendly too, but it might\n         * requires additional server-side configuration in order to properly work.\n         *\n         * On the otherside hash-navigation is much easier to deploy, it even works over the file protocol.\n         *\n         * By default, this property is `true`, change to `false` to allow hash-less URLs.\n         */\n        this.useHash = true;\n        this.ionRouteWillChange = createEvent(this, \"ionRouteWillChange\", 7);\n        this.ionRouteDidChange = createEvent(this, \"ionRouteDidChange\", 7);\n    }\n    async componentWillLoad() {\n        console.debug('[ion-router] router will load');\n        await waitUntilNavNode();\n        console.debug('[ion-router] found nav');\n        await this.onRoutesChanged();\n    }\n    componentDidLoad() {\n        window.addEventListener('ionRouteRedirectChanged', debounce(this.onRedirectChanged.bind(this), 10));\n        window.addEventListener('ionRouteDataChanged', debounce(this.onRoutesChanged.bind(this), 100));\n    }\n    onPopState() {\n        const direction = this.historyDirection();\n        const path = this.getPath();\n        console.debug('[ion-router] URL changed -> update nav', path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    onBackButton(ev) {\n        ev.detail.register(0, () => this.back());\n    }\n    /**\n     * Navigate to the specified URL.\n     *\n     * @param url The url to navigate to.\n     * @param direction The direction of the animation. Defaults to `\"forward\"`.\n     */\n    push(url, direction = 'forward') {\n        if (url.startsWith('.')) {\n            url = (new URL(url, window.location.href)).pathname;\n        }\n        console.debug('[ion-router] URL pushed -> updating nav', url, direction);\n        const path = parsePath(url);\n        this.setPath(path, direction);\n        return this.writeNavStateRoot(path, direction);\n    }\n    /**\n     * Go back to previous page in the window.history.\n     */\n    back() {\n        window.history.back();\n        return Promise.resolve(this.waitPromise);\n    }\n    /** @internal */\n    async printDebug() {\n        console.debug('CURRENT PATH', this.getPath());\n        console.debug('PREVIOUS PATH', this.previousPath);\n        printRoutes(readRoutes(this.el));\n        printRedirects(readRedirects(this.el));\n    }\n    /** @internal */\n    async navChanged(direction) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, navChanged was cancelled');\n            return false;\n        }\n        const { ids, outlet } = await readNavState(window.document.body);\n        const routes = readRoutes(this.el);\n        const chain = routerIDsToChain(ids, routes);\n        if (!chain) {\n            console.warn('[ion-router] no matching URL for ', ids.map(i => i.id));\n            return false;\n        }\n        const path = chainToPath(chain);\n        if (!path) {\n            console.warn('[ion-router] router could not match path because some required param is missing');\n            return false;\n        }\n        console.debug('[ion-router] nav changed -> update URL', ids, path);\n        this.setPath(path, direction);\n        await this.safeWriteNavState(outlet, chain, ROUTER_INTENT_NONE, path, null, ids.length);\n        return true;\n    }\n    onRedirectChanged() {\n        const path = this.getPath();\n        if (path && routeRedirect(path, readRedirects(this.el))) {\n            this.writeNavStateRoot(path, ROUTER_INTENT_NONE);\n        }\n    }\n    onRoutesChanged() {\n        return this.writeNavStateRoot(this.getPath(), ROUTER_INTENT_NONE);\n    }\n    historyDirection() {\n        const win = window;\n        if (win.history.state === null) {\n            this.state++;\n            win.history.replaceState(this.state, win.document.title, win.document.location && win.document.location.href);\n        }\n        const state = win.history.state;\n        const lastState = this.lastState;\n        this.lastState = state;\n        if (state > lastState) {\n            return ROUTER_INTENT_FORWARD;\n        }\n        else if (state < lastState) {\n            return ROUTER_INTENT_BACK;\n        }\n        else {\n            return ROUTER_INTENT_NONE;\n        }\n    }\n    async writeNavStateRoot(path, direction) {\n        if (!path) {\n            console.error('[ion-router] URL is not part of the routing set');\n            return false;\n        }\n        // lookup redirect rule\n        const redirects = readRedirects(this.el);\n        const redirect = routeRedirect(path, redirects);\n        let redirectFrom = null;\n        if (redirect) {\n            this.setPath(redirect.to, direction);\n            redirectFrom = redirect.from;\n            path = redirect.to;\n        }\n        // lookup route chain\n        const routes = readRoutes(this.el);\n        const chain = routerPathToChain(path, routes);\n        if (!chain) {\n            console.error('[ion-router] the path does not match any route');\n            return false;\n        }\n        // write DOM give\n        return this.safeWriteNavState(document.body, chain, direction, path, redirectFrom);\n    }\n    async safeWriteNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        const unlock = await this.lock();\n        let changed = false;\n        try {\n            changed = await this.writeNavState(node, chain, direction, path, redirectFrom, index);\n        }\n        catch (e) {\n            console.error(e);\n        }\n        unlock();\n        return changed;\n    }\n    async lock() {\n        const p = this.waitPromise;\n        let resolve;\n        this.waitPromise = new Promise(r => resolve = r);\n        if (p !== undefined) {\n            await p;\n        }\n        return resolve;\n    }\n    async writeNavState(node, chain, direction, path, redirectFrom, index = 0) {\n        if (this.busy) {\n            console.warn('[ion-router] router is busy, transition was cancelled');\n            return false;\n        }\n        this.busy = true;\n        // generate route event and emit will change\n        const routeEvent = this.routeChangeEvent(path, redirectFrom);\n        if (routeEvent) {\n            this.ionRouteWillChange.emit(routeEvent);\n        }\n        const changed = await writeNavState(node, chain, direction, index);\n        this.busy = false;\n        if (changed) {\n            console.debug('[ion-router] route changed', path);\n        }\n        // emit did change\n        if (routeEvent) {\n            this.ionRouteDidChange.emit(routeEvent);\n        }\n        return changed;\n    }\n    setPath(path, direction) {\n        this.state++;\n        writePath(window.history, this.root, this.useHash, path, direction, this.state);\n    }\n    getPath() {\n        return readPath(window.location, this.root, this.useHash);\n    }\n    routeChangeEvent(path, redirectFromPath) {\n        const from = this.previousPath;\n        const to = generatePath(path);\n        this.previousPath = to;\n        if (to === from) {\n            return null;\n        }\n        const redirectedFrom = redirectFromPath ? generatePath(redirectFromPath) : null;\n        return {\n            from,\n            redirectedFrom,\n            to,\n        };\n    }\n    get el() { return getElement(this); }\n};\n\nconst routerLinkCss = \":host{--background:transparent;--color:var(--ion-color-primary, #3880ff);background:var(--background);color:var(--color)}:host(.ion-color){color:var(--ion-color-base)}a{font-family:inherit;font-size:inherit;font-style:inherit;font-weight:inherit;letter-spacing:inherit;text-decoration:inherit;text-indent:inherit;text-overflow:inherit;text-transform:inherit;text-align:inherit;white-space:inherit;color:inherit}\";\n\nconst RouterLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * When using a router, it specifies the transition direction when navigating to\n         * another page using `href`.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = (ev) => {\n            openURL(this.href, ev, this.routerDirection);\n        };\n    }\n    render() {\n        const mode = getIonMode(this);\n        const attrs = {\n            href: this.href,\n            rel: this.rel,\n            target: this.target\n        };\n        return (h(Host, { onClick: this.onClick, class: Object.assign(Object.assign({}, createColorClasses(this.color)), { [mode]: true, 'ion-activatable': true }) }, h(\"a\", Object.assign({}, attrs), h(\"slot\", null))));\n    }\n};\nRouterLink.style = routerLinkCss;\n\nexport { Route as ion_route, RouteRedirect as ion_route_redirect, Router as ion_router, RouterLink as ion_router_link };\n","const hostContext = (selector, el) => {\n    return el.closest(selector) !== null;\n};\n/**\n * Create the mode and color classes for the component based on the classes passed in\n */\nconst createColorClasses = (color) => {\n    return (typeof color === 'string' && color.length > 0) ? {\n        'ion-color': true,\n        [`ion-color-${color}`]: true\n    } : undefined;\n};\nconst getClassList = (classes) => {\n    if (classes !== undefined) {\n        const array = Array.isArray(classes) ? classes : classes.split(' ');\n        return array\n            .filter(c => c != null)\n            .map(c => c.trim())\n            .filter(c => c !== '');\n    }\n    return [];\n};\nconst getClassMap = (classes) => {\n    const map = {};\n    getClassList(classes).forEach(c => map[c] = true);\n    return map;\n};\nconst SCHEME = /^[a-z][a-z0-9+\\-.]*:/;\nconst openURL = async (url, ev, direction) => {\n    if (url != null && url[0] !== '#' && !SCHEME.test(url)) {\n        const router = document.querySelector('ion-router');\n        if (router) {\n            if (ev != null) {\n                ev.preventDefault();\n            }\n            return router.push(url, direction);\n        }\n    }\n    return false;\n};\n\nexport { createColorClasses as c, getClassMap as g, hostContext as h, openURL as o };\n"],"sourceRoot":""}