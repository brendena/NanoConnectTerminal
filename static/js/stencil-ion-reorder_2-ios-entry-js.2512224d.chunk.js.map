{"version":3,"sources":["../node_modules/@ionic/core/dist/esm-es5/ion-reorder_2-ios.entry.js","../node_modules/@ionic/core/dist/esm-es5/haptic-ccbda579.js"],"names":["Reorder","hostRef","registerInstance","this","ev","preventDefault","stopImmediatePropagation","mode","getIonMode","reorderIcon","h","Host","class","name","lazy","style","ios","md","ReorderGroup","lastToIndex","cachedHeights","scrollElTop","scrollElBottom","scrollElInitial","containerTop","containerBottom","state","disabled","ionItemReorder","createEvent","gesture","enable","contentEl","el","closest","getScrollElement","scrollEl","createGesture","gestureName","gesturePriority","threshold","direction","passive","canStart","detail","onStart","onMove","onEnd","disabledChanged","destroy","undefined","listOrReorder","Promise","resolve","completeSync","selectedItemEl","reorderEl","event","target","item","findReorderItem","data","heights","length","children","sum","i","child","offsetHeight","push","$ionIndex","box","getBoundingClientRect","top","bottom","scrollBox","scrollTop","AUTO_SCROLL_MARGIN","indexForItem","selectedItemHeight","classList","add","ITEM_REORDER_SELECTED","hapticSelectionStart","selectedItem","scroll","autoscroll","currentY","Math","max","min","deltaY","startY","normalizedY","toIndex","itemIndexForTop","fromIndex","hapticSelectionChanged","reorderMove","transform","emit","from","to","complete","bind","hapticSelectionEnd","len","ref","insertBefore","Array","isArray","reorderArray","transition","remove","itemHeight","value","posY","amount","SCROLL_JUMP","scrollBy","getElement","element","node","container","parent","parentElement","array","splice","slice","hapticSelection","engine","window","TapticEngine","selection","gestureSelectionStart","gestureSelectionChanged","gestureSelectionEnd"],"mappings":"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","file":"static/js/stencil-ion-reorder_2-ios-entry-js.2512224d.chunk.js","sourcesContent":["import { r as registerInstance, h, H as Host, d as createEvent, e as getElement } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, c as hapticSelectionEnd } from './haptic-ccbda579.js';\n\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\n\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\n\nconst Reorder = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n    }\n    onClick(ev) {\n        ev.preventDefault();\n        ev.stopImmediatePropagation();\n    }\n    render() {\n        const mode = getIonMode(this);\n        const reorderIcon = mode === 'ios' ? 'reorder-three-outline' : 'reorder-two-sharp';\n        return (h(Host, { class: mode }, h(\"slot\", null, h(\"ion-icon\", { name: reorderIcon, lazy: false, class: \"reorder-icon\" }))));\n    }\n};\nReorder.style = {\n    /*STENCIL:MODE:ios*/ ios: reorderIosCss,\n    /*STENCIL:MODE:md*/ md: reorderMdCss\n};\n\nconst reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\n\nconst ReorderGroup = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.lastToIndex = -1;\n        this.cachedHeights = [];\n        this.scrollElTop = 0;\n        this.scrollElBottom = 0;\n        this.scrollElInitial = 0;\n        this.containerTop = 0;\n        this.containerBottom = 0;\n        this.state = 0 /* Idle */;\n        /**\n         * If `true`, the reorder will be hidden.\n         */\n        this.disabled = true;\n        this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    }\n    disabledChanged() {\n        if (this.gesture) {\n            this.gesture.enable(!this.disabled);\n        }\n    }\n    async connectedCallback() {\n        const contentEl = this.el.closest('ion-content');\n        if (contentEl) {\n            this.scrollEl = await contentEl.getScrollElement();\n        }\n        this.gesture = (await import('./index-e44ebcc6.js')).createGesture({\n            el: this.el,\n            gestureName: 'reorder',\n            gesturePriority: 110,\n            threshold: 0,\n            direction: 'y',\n            passive: false,\n            canStart: detail => this.canStart(detail),\n            onStart: ev => this.onStart(ev),\n            onMove: ev => this.onMove(ev),\n            onEnd: () => this.onEnd(),\n        });\n        this.disabledChanged();\n    }\n    disconnectedCallback() {\n        this.onEnd();\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n    }\n    /**\n     * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n     *\n     * If a list of items is passed, the list will be reordered and returned in the\n     * proper order.\n     *\n     * If no parameters are passed or if `true` is passed in, the reorder will complete\n     * and the item will remain in the position it was dragged to. If `false` is passed,\n     * the reorder will complete and the item will bounce back to its original position.\n     *\n     * @param listOrReorder A list of items to be sorted and returned in the new order or a\n     * boolean of whether or not the reorder should reposition the item.\n     */\n    complete(listOrReorder) {\n        return Promise.resolve(this.completeSync(listOrReorder));\n    }\n    canStart(ev) {\n        if (this.selectedItemEl || this.state !== 0 /* Idle */) {\n            return false;\n        }\n        const target = ev.event.target;\n        const reorderEl = target.closest('ion-reorder');\n        if (!reorderEl) {\n            return false;\n        }\n        const item = findReorderItem(reorderEl, this.el);\n        if (!item) {\n            return false;\n        }\n        ev.data = item;\n        return true;\n    }\n    onStart(ev) {\n        ev.event.preventDefault();\n        const item = this.selectedItemEl = ev.data;\n        const heights = this.cachedHeights;\n        heights.length = 0;\n        const el = this.el;\n        const children = el.children;\n        if (!children || children.length === 0) {\n            return;\n        }\n        let sum = 0;\n        for (let i = 0; i < children.length; i++) {\n            const child = children[i];\n            sum += child.offsetHeight;\n            heights.push(sum);\n            child.$ionIndex = i;\n        }\n        const box = el.getBoundingClientRect();\n        this.containerTop = box.top;\n        this.containerBottom = box.bottom;\n        if (this.scrollEl) {\n            const scrollBox = this.scrollEl.getBoundingClientRect();\n            this.scrollElInitial = this.scrollEl.scrollTop;\n            this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n            this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n        }\n        else {\n            this.scrollElInitial = 0;\n            this.scrollElTop = 0;\n            this.scrollElBottom = 0;\n        }\n        this.lastToIndex = indexForItem(item);\n        this.selectedItemHeight = item.offsetHeight;\n        this.state = 1 /* Active */;\n        item.classList.add(ITEM_REORDER_SELECTED);\n        hapticSelectionStart();\n    }\n    onMove(ev) {\n        const selectedItem = this.selectedItemEl;\n        if (!selectedItem) {\n            return;\n        }\n        // Scroll if we reach the scroll margins\n        const scroll = this.autoscroll(ev.currentY);\n        // // Get coordinate\n        const top = this.containerTop - scroll;\n        const bottom = this.containerBottom - scroll;\n        const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n        const deltaY = scroll + currentY - ev.startY;\n        const normalizedY = currentY - top;\n        const toIndex = this.itemIndexForTop(normalizedY);\n        if (toIndex !== this.lastToIndex) {\n            const fromIndex = indexForItem(selectedItem);\n            this.lastToIndex = toIndex;\n            hapticSelectionChanged();\n            this.reorderMove(fromIndex, toIndex);\n        }\n        // Update selected item position\n        selectedItem.style.transform = `translateY(${deltaY}px)`;\n    }\n    onEnd() {\n        const selectedItemEl = this.selectedItemEl;\n        this.state = 2 /* Complete */;\n        if (!selectedItemEl) {\n            this.state = 0 /* Idle */;\n            return;\n        }\n        const toIndex = this.lastToIndex;\n        const fromIndex = indexForItem(selectedItemEl);\n        if (toIndex === fromIndex) {\n            this.completeSync();\n        }\n        else {\n            this.ionItemReorder.emit({\n                from: fromIndex,\n                to: toIndex,\n                complete: this.completeSync.bind(this)\n            });\n        }\n        hapticSelectionEnd();\n    }\n    completeSync(listOrReorder) {\n        const selectedItemEl = this.selectedItemEl;\n        if (selectedItemEl && this.state === 2 /* Complete */) {\n            const children = this.el.children;\n            const len = children.length;\n            const toIndex = this.lastToIndex;\n            const fromIndex = indexForItem(selectedItemEl);\n            if (toIndex !== fromIndex && (!listOrReorder || listOrReorder === true)) {\n                const ref = (fromIndex < toIndex)\n                    ? children[toIndex + 1]\n                    : children[toIndex];\n                this.el.insertBefore(selectedItemEl, ref);\n            }\n            if (Array.isArray(listOrReorder)) {\n                listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n            }\n            for (let i = 0; i < len; i++) {\n                children[i].style['transform'] = '';\n            }\n            selectedItemEl.style.transition = '';\n            selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n            this.selectedItemEl = undefined;\n            this.state = 0 /* Idle */;\n        }\n        return listOrReorder;\n    }\n    itemIndexForTop(deltaY) {\n        const heights = this.cachedHeights;\n        let i = 0;\n        // TODO: since heights is a sorted array of integers, we can do\n        // speed up the search using binary search. Remember that linear-search is still\n        // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n        for (i = 0; i < heights.length; i++) {\n            if (heights[i] > deltaY) {\n                break;\n            }\n        }\n        return i;\n    }\n    /********* DOM WRITE ********* */\n    reorderMove(fromIndex, toIndex) {\n        const itemHeight = this.selectedItemHeight;\n        const children = this.el.children;\n        for (let i = 0; i < children.length; i++) {\n            const style = children[i].style;\n            let value = '';\n            if (i > fromIndex && i <= toIndex) {\n                value = `translateY(${-itemHeight}px)`;\n            }\n            else if (i < fromIndex && i >= toIndex) {\n                value = `translateY(${itemHeight}px)`;\n            }\n            style['transform'] = value;\n        }\n    }\n    autoscroll(posY) {\n        if (!this.scrollEl) {\n            return 0;\n        }\n        let amount = 0;\n        if (posY < this.scrollElTop) {\n            amount = -SCROLL_JUMP;\n        }\n        else if (posY > this.scrollElBottom) {\n            amount = SCROLL_JUMP;\n        }\n        if (amount !== 0) {\n            this.scrollEl.scrollBy(0, amount);\n        }\n        return this.scrollEl.scrollTop - this.scrollElInitial;\n    }\n    render() {\n        const mode = getIonMode(this);\n        return (h(Host, { class: {\n                [mode]: true,\n                'reorder-enabled': !this.disabled,\n                'reorder-list-active': this.state !== 0 /* Idle */,\n            } }));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"disabled\": [\"disabledChanged\"]\n    }; }\n};\nconst indexForItem = (element) => {\n    return element['$ionIndex'];\n};\nconst findReorderItem = (node, container) => {\n    let parent;\n    while (node) {\n        parent = node.parentElement;\n        if (parent === container) {\n            return node;\n        }\n        node = parent;\n    }\n    return undefined;\n};\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\nconst reorderArray = (array, from, to) => {\n    const element = array[from];\n    array.splice(from, 1);\n    array.splice(to, 0, element);\n    return array.slice();\n};\nReorderGroup.style = reorderGroupCss;\n\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };\n","/**\n * Check to see if the Haptic Plugin is available\n * @return Returns `true` or false if the plugin is available\n */\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\nconst hapticSelection = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.selection();\n    }\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\nconst hapticSelectionStart = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionStart();\n    }\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\nconst hapticSelectionChanged = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionChanged();\n    }\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\nconst hapticSelectionEnd = () => {\n    const engine = window.TapticEngine;\n    if (engine) {\n        engine.gestureSelectionEnd();\n    }\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelectionEnd as c, hapticSelection as h };\n"],"sourceRoot":""}